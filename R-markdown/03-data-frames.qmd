---
title: Data frames
date: "`r Sys.Date()`"
output: 
  html_document:
      toc: true
      toc_float: true
      number_sections: false
      theme: united
      code-copy: true
fontsize: 12pt
theme: united
geometry: margin=1in
urlcolor: blue
---


------------

> ## Learning Objectives
>
> * load external data (CSV files) in memory 
> * understand the concept of a `data.frame`
> * know how to access any element of a `data.frame`
> * understand `factors` and how to manipulate them

------------

## Reading external data

Now, we will start looking at data-sets. There are many ways of reading external datasets into `R` but we will review three different ways. 

## From `R` package 

-  Reading data that is already in an `R` package. Sometimes you need to install a package, and sometimes it is already pre-installed in R. If you type `data()` into your console, you'll see a list of datasets. 

```{r}
data()
```

We can choose any one of them to work on, e.g. the `mtcars` data.

```{r}
# 1. Loading 
data("mtcars")
# 2. Print
head(mtcars)
```


## From an URL 

You can also read a CSV file directly from an URL where it is hosted. For example, here is a historical dataset collected by John Arbuthnot (1710). From the [data page](https://www.openintro.org/data/index.php?data=arbuthnot), we can read the details: 

> "John Arbuthnot (1710) used these time series data to carry out the first   known significance test. During every one of the 82 years, there were      more male christenings than female christenings. As Arbuthnot wondered,    we might also wonder if this could be due to chance, or whether it meant   the birth ratio was not actually 1:1."

```{r}
arbuthnot <- read.csv("https://www.openintro.org/data/csv/arbuthnot.csv")

head(arbuthnot)
```

> ### Challenge

Read this data-set from the american community survey: [https://www.openintro.org/data/index.php?data=acs12](https://www.openintro.org/data/index.php?data=acs12). Scroll to the bottom of the page for the link to the CSV.


```{r}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"

acs <- read.csv("https://www.openintro.org/data/csv/acs12.csv")
head(acs)
```

## Reading an external CSV file 

The third option is reading a spreadsheet or an excel file from your computer's hard disk. The file required for this lesson can be downlaoded by clicking on this [link](./data/herding-cats-small.csv). 

- Move the downloaded file into the directory for this workshop. 

- To view your current working directory use the `getwd()` command.

```{r, eval=FALSE, echo=FALSE}
getwd()
```

Working directory is a file path that sets the location of any files you save from R, datasets you import into R, etc. This is your default file path. The function to set your working directory is: `setwd(<PATH>)`.

To set you working directory, use the `setwd()` command. We want to set the working directory to the location of our project. 

For example: 

```{r, eval=FALSE}
setwd("~/GitHub/BeginneR/R codes")
```

### Looking at data

You are now ready to load the data. We are going to use the R function  `read.csv()` to load the data file into memory (as a `data.frame`). In this case, our data is in a sub-directory called "data". 

```{r}
cats <- read.csv(file = 'data/herding-cats-small.csv')
```


This statement doesn't produce any output because assignment doesn't display anything. If we want to check that our data has been loaded, we can print the variable's value: `cats`.

```{r}
cats
```

However, if our dataset was larger, we probably wouldn't want to print the whole thing to our console. Instead, we can use the `head` command to view the first six lines or the `View` command to open the dataset in a spreadsheet-like viewer. 

```{r, eval=FALSE}
head(cats)
View(cats)
```

We've just done two very useful things.         
1. We've read our data in to R, so now we can work with it in R           
2. We've created a data frame (with the `read.csv` command) the 
standard way R works with data.  

# What are data frames?

`data.frame` is the _de facto_ data structure for most tabular data and what we use for statistics and plotting.

A `data.frame` is actually a `list` of vectors of identical lengths. Each vector represents a column, and each vector can be of a different data type (e.g., characters, integers, factors). The `str()` function is useful to inspect the data types of the columns.

A `data.frame` can be created by the functions `read.csv()` or `read.table()`, in other words, when importing spreadsheets from your hard drive (or the web).

By default, `data.frame` does not convert (= coerces) columns that contain characters (i.e., text) into the `factor` data type. Depending on what you want to do with the data, you may want to keep these columns as `character`. To do so, `read.csv()` and `read.table()` have an argument called `stringsAsFactors` which can be set to `TRUE`:


## Oscars data 

We will now read a data-frame on Oscar winners! This is available on [this link](https://www.openintro.org/data/index.php?data=oscars), with details as follows:

>  "Best actor and actress Oscar winners from 1929 to 2018. Note: Although there have been only 84 Oscar ceremonies until 2012, there are 85 male winners and 85 female winners because ties happened on two occasions (1933 for the best actor and 1969 for the best actress)."

Let's now check the structure of this `data.frame` in more details with the function `str()`:

```{r}
oscars <- read.csv("https://www.openintro.org/data/csv/oscars.csv", 
                   stringsAsFactors = TRUE)
str(oscars)
```

# Inspecting `data.frame` objects

We already saw how the functions `head()` and `str()` can be useful to check the
content and the structure of a `data.frame`. Here is a non-exhaustive list of
functions to get a sense of the content/structure of the data.

* Size:
    * `dim()` - returns a vector with the number of rows in the first element, and
    the number of columns as the second element (the dimensions of the object)
    * `nrow()` - returns the number of rows
    * `ncol()` - returns the number of columns
* Content:
    * `head()` - shows the first 6 rows
    * `tail()` - shows the last 6 rows
* Names:
    * `names()` - returns the column names (synonym of `colnames()` 
    for `data.frame` objects)             
    * `rownames()` - returns the row names  
* Summary:    
    * `str()` - structure of the object and information about the class, length and
	content of  each column         
    * `summary()` - summary statistics for each column         

Note: most of these functions are "generic", they can be used on other types of
objects besides `data.frame`.



## Indexing `data.frame` objects


Our oscars data frame has rows and columns (it has 2 dimensions), if we want to extract some specific data from it, we need to specify the "coordinates" we want from it. Row numbers come first, followed by column numbers (i.e. [row, column]).

```{r eval=FALSE}
oscars[1, 2]   # first element in the 2nd column of the data frame
oscars[1, 6]   # first element in the 6th column
oscars[1:3, 7] # first three elements in the 7th column
oscars[10, ]    # the 3rd element for all columns
oscars[, 7]    # the entire 7th column
```


For larger datasets, it can be tricky to remember the column number that
corresponds to a particular variable. (Are birth places in column 5 or 7? oh, right... they are in column 6). In some cases, in which column the variable will be can change if the script you are using adds or removes columns. It's therefore often better to use column names to refer to a particular variable, and it makes your code easier to read and your intentions clearer.

You can do operations on a particular column, by selecting it using the `$` sign. In this case, the entire column is a vector. You can use `names(oscars)` or `colnames(oscars)` to remind yourself of the column names. For instance, to extract all the oscar winners' age at the time of win information from our dataset:

```{r}
colnames(oscars)
oscars$age
oscars$birth_y
```

In some cases, you may way to select more than one column. You can do this using the square brackets, passing in a vector of the columns to select. Suppose we wanted birth place and age information for the first 10 years. 

```{r}
oscars[1:10 , c("name", "age", "birth_pl", "age")]
```

You can even access columns by column name _and_ select specific rows of interest. For example, if we wanted the  birth place and age of just rows
4 through 7, we could do:

```{r}
oscars[4:7, c("age", "birth_pl")]
```

We can can also use logical statements to select and filter items from a `data.frame`. For example, to select all rows with oscar winners from Virginia or winners at age 22 we could use the following statement

```{r}
oscars[oscars$birth_pl == "Virginia", ]

oscars[oscars$age == 22, ]
```

let's break this down a bit. The logical statement in the brackets returns a vector of `TRUE` and `FALSE` values. 

```{r}
oscars$birth_pl == "Virginia"
```

These `booleans` allow us to select which records we want from our `data.frame`

Another way to do this is with the function `which()`. `which()` finds the indexes of records meeting a logical statement
```{r}
which(oscars$birth_pl == "Virginia")
```

So, we could also write 
```{r}
oscars[which(oscars$birth_pl == "Virginia"), ]
```
But that's getting really long and ugly. R is already considered somewhat of an ugly duckling among programming languages, so no reason to play into the stereotype.

We can combine logical statements and index statements
```{r}
oscars[oscars$birth_pl == "Virginia", c("name", "birth_pl", "age")]
```

Finally, we can use `&`, the symbol for "and", and `|`, the symbol for "or", to make logical statements.

```{r}
# oscars$birth_pl == "Virginia" & oscars$award == "Best actor"
oscars[oscars$birth_pl == "Virginia" & oscars$award == "Best actor", ]

```
This statement selects all records with oscar winners who were born in Virginia and won in the "best actor" category. 

> ### Challenge 
1.  Select all actors who won an oscar over the age of 50 and born in "New York". 
2.  Can you modify the code to select only wins in the "Best actor" category? 


```{r}
#| echo: true
#| code-fold: true
#| code-summary: "expand for full code"

oscars[oscars$age>50 & oscars$birth_pl == "New York", ]


oscars[oscars$age>50 & oscars$birth_pl == "New York" & oscars$award == "Best actor", ]

```

## Factors

Factors are used to represent categorical data. Factors can be ordered or
unordered and are an important class for statistical analysis and for plotting.

Factors are stored as integers, and have labels associated with these unique
integers. While factors look (and often behave) like character vectors, they are
actually integers under the hood, and you need to be careful when treating them
like strings.

In the data frame we just imported, let's do 
```{r}
str(oscars)
```

We can see the names of the multiple columns. And, we see that 
coat is a `Factor w/ 5 levels`

When we read in a file, any column that contains text is automatically
assumed to be a factor. Once created, factors can only contain a pre-defined set values, known as
*levels*. By default, R always sorts *levels* in alphabetical order. 


You can check this by using the function `levels()`, and check the
number of levels using `nlevels()`:

```{r}
levels(oscars$birth_pl)
nlevels(oscars$birth_pl)
```

Sometimes, the order of the factors does not matter, other times you might want
to specify the order because it is meaningful (e.g., "low", "medium", "high") or
it is required by particular type of analysis. Additionally, specifying the
order of the levels allows to compare levels:

```{r, error=TRUE}
satisfaction <- factor(c("low", "high", "medium", "high", "low", "medium", "high"))
levels(satisfaction)
satisfaction <- factor(satisfaction, levels = c("low", "medium", "high"))
levels(satisfaction)
min(satisfaction) ## doesn't work
satisfaction <- factor(satisfaction, levels = c("low", "medium", "high"), ordered = TRUE)
levels(satisfaction)
min(satisfaction) ## works!
```

In R's memory, these factors are represented by numbers (1, 2, 3). They are
better than using simple integer labels because factors are self describing:
`"low"`, `"medium"`, and `"high"`" is more descriptive than `1`, `2`, `3`. Which
is low?  You wouldn't be able to tell with just integer data. Factors have this
information built in. It is particularly helpful when there are many levels
(like the species in our example data set).

### Converting factors

If you need to convert a factor to a character vector, simply use
`as.character(x)`.

Converting a factor to a numeric vector is however a little trickier, and you
have to go via a character vector. Compare:

```{r}
f <- factor(c(1, 5, 10, 2))
as.numeric(f)               ## wrong! and there is no warning...
as.numeric(as.character(f)) ## works...
as.numeric(levels(f))[f]    ## The recommended way.
```

